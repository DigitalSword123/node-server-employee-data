version: '2.0'
orbs:
  node: circleci/node@5.0.2
jobs:
# https://medium.com/geekculture/configure-aws-credentials-in-circle-ci-8353d765aa15
  # build:
  #   docker:
  #     - image: circleci/node:latest
  #   working_directory: ~/node-server-employee-data
    
  #   steps:
  #    - checkout
  #    - setup_remote_docker
  #    - run: echo "build docker image with required instllation of node and git"
  #    - run: echo "Node versiopn in docker is"
  #    - run: node --version
  #    - run: npm install --save-dev
    
  npm_build: &npm_build
    docker:
      - image: circleci/node:latest
    working_directory: ~/node-server-employee-data
    steps:
      - checkout
      - run: bash ./terraform_project/scripts/npm_build.sh

  npm_unit_test: &npm_unit_test
    docker:
      - image: circleci/node:latest # use the default executor defined within the orb
    steps:
      - checkout
      - run: bash ./terraform_project/scripts/npm-test.sh

  deploy: &deploy-env
    docker:
      - image: circleci/node:latest
    
    working_directory: ~/node-server-employee-data/terraform_project

    steps:
      - checkout 
      - setup_remote_docker
      - run : 
          name: beofre_script
          command: |
            echo "deploy"
            echo $(pwd)
            echo ${tag}
            echo $PATH
            echo $TARGET_ENV_DEV
            bash ./terraform_project/scripts/terraform_install.sh   
            ls -al
            bash ./terraform_project/scripts/before_script_deploy.sh
            bash ./terraform_project/scripts/deploy_script.sh
            echo `deployed successfully in $DEPLOY_ENVIRONMENT environment`
  
  # .debug_logic: &debug_logic
  #   - run : 
  #       command: |
  #         if ["$DEBUG=true"] ; then
  #           set -xv
  #           echo "ARTIFACT_ID is $ARTIFACT_ID"
  #           echo "VERSION is $APP_VERSION"
  #           echo "NEXT_DEVELOPEMENT_VERSION is $NEXT_DEVELOPEMENT_VERSION"
  #           echo "prinitng package.json file"
  #           cat package.json
  #           git config --list
  #         fi
  
  # .only_branch_default: &only_branch_default
  #   only:
  #     - /^feature/.*$/
  #     - /^hotfix/.*$/
  #     - /^bugfix/.*$/
  #     - merge_requests
  #   except:
  #     refs:
  #       - main
  #       - tags
  
  # .except_master: &except_master
  #   rules:
  #     - if: $CIRCLE_BRANCH=="master"
  #       when: never
  #     - when: on_success
  
  # .only_merge_request: &only_merge_request
    

  init-before-script: &init-before-script
    docker:
        - image: cimg/python:3.10.6
    working_directory: ~/
    steps:
      - run : 
          name: beofre_script
          command: |
            echo $(pwd)
            mkdir .aws
            mkdir .jfrog
            mkdir .m2
            ls -al
            pip install --upgrade pip
            pip install semver # https://python-semver.readthedocs.io/en/2.9.0/index.html
            if [ "$DEBUG" = true ] ; then
              ls -alrt ~/.aws && ls -alrt ~ && ls -alrtr ~/.jfrog/ && ls -alrt ~/.m2
            fi
  init-script: &init-script
    docker:
      - image: cimg/python:3.10.6
    
    working_directory: ~/node-server-employee-data
    steps:
      - checkout 
      - setup_remote_docker
      - run :
          name: script
          command: |
            echo $(pwd)
            ls -al
            ARTIFACTORY_URL="https://devopsamiya.jfrog.io/artifactory/api/npm"
            ARTIFACTORY_BASE_URL="https://devopsamiya.jfrog.io/artifactory"
            ARTIFACTORY_RELEASE="releases-npm"
            ARTIFACTORY_SNAPSHOTS="snapshots-npm"
            touch ${VARIABLE_FILE}
            echo ARTIFACT_ID=$(jq -r .name package.json) >> ${VARIABLE_FILE}
            VERSION=$(jq -r .version package.json) 
            now=`date +'%Y%m%d%h%M'`
            echo CURRENT_SNAPSHOT_VER="VERSION.$now" >> ${VARIABLE_FILE}
            CURRENT_SNAPSHOT_VER="$VERSION.$now"
            echo RELEASE_VERSION=$(sed 's/-SNAPSHOT//' <<<$(jq -r .version package.json)) >> ${VARIABLE_FILE}
            TEMP_VAR=$(sed 's/-SNAPSHOT//' <<<$(jq -r .version package.json))
            pip install --upgrade pip
            pip install semver # https://python-semver.readthedocs.io/en/2.9.0/index.html
            echo NEXT_DEVELOPEMENT_VERSION="$(pysemver bump patch $TEMP_VAR)-SNAPSHOT"
            REP_URL=$(jq -r .repository.url package.json)
            STRIPPED_URL=$(echo $REP_URL | sed 's~.*github.com/~~')
            COMPUTED_SSH_URL=git@github.com:$STRIPPED_URL
            echo COMPUTED_SSH_URLgit@github.com:$STRIPPED_URL >> ${VARIABLE_FILE}
            echo HTTPS_URL=$(jq -r .repository.http_url package.json)
            echo COMPUTED_SSH_URLgit@github.com:$STRIPPED_URL
            git --version
            git branch -r
            if[ "origin/$CIRCLE_BRANCH" == "origin/main" ]
            then
              echo RELEASE_VERSION=$TEMP_VAR
              echo NEXT_DEVELOPEMENT_VERSION=$NEXT_DEVELOPEMENT_VERSION
              echo APP_VERSION=$TEMP_VAR >> ${VARIABLE_FILE}
              echo ARTIFACTORY_LOC="$ARTIFACTORY_URL/$ARTIFACTORY_RELEASE/" >> ${VARIABLE_FILE}
              echo ARTIFACTORY_TYPE=$ARTIFACTORY_RELEASE >> ${VARIABLE_FILE}
              echo ARTIFACTORY_LOC="$ARTIFACTORY_URL/$ARTIFACTORY_RELEASE/"
            elif [$CIRCLE_TAG!=null]
            then
              echo "deploying tag: $CIRCLE_TAG"
              echo "APP_VERSION=$VERSION" >> ${VARIABLE_FILE}
              echo "artifactory_type=$ARTIFACTORY_RELEASE" >> ${VARIABLE_FILE}
              echo ARTIFACTORY_TYPE=$ARTIFACTORY_RELEASE >> ${VARIABLE_FILE}
            else
              echo SNAPSHOT_VERSION=$CURRENT_SNAPSHOT_VER
              echo APP_VERSION=$CURRENT_SNAPSHOT_VER >> ${VARIABLE_FILE}
              echo ARTIFACTORY_LOC="$ARTIFACTORY_URL/$ARTIFACTORY_SNAPSHOTS/" >> ${VARIABLE_FILE}
              echo ARTIFACTORY_LOC="$ARTIFACTORY_URL/$ARTIFACTORY_SNAPSHOTS/"
              echo ARTIFACTORY_TYPE=$ARTIFACTORY_SNAPSHOTS >> ${VARIABLE_FILE}
            fi

  init-before:
    <<: *init-before-script
    environment:
      DEBUG: true
  init:
    <<: *init-script
    environment:
      DEBUG: true
      VARIABLE_FILE: build.env
  build:
    <<: *npm_build
    environment:
      tag: dev
      ARTIFACTORY_URL: "https://devopsamiya.jfrog.io/artifactory/api/npm/employee-data-npm/"
      
  test:
    <<: *npm_unit_test
    environment:
      tag: dev
      POSTGRESS_USER: "postgres"
      POSTGRESS_DB: "employee_data"
      PGPASSWORD: "mypassword"

  deploy_dev:
    <<: *deploy-env
    environment:
      DEPLOY_ENVIRONMENT: dev

  deploy_qa:
    <<: *deploy-env
    environment:
      DEPLOY_ENVIRONMENT: qa
    
  deploy_uat:
    <<: *deploy-env
    environment:
      DEPLOY_ENVIRONMENT: uat

  deploy_prod:
    <<: *deploy-env
    environment:
      DEPLOY_ENVIRONMENT: prod

workflows:
  version: 2
  # this aws-cli workflow for terraform work
  stage_workflow:
    jobs:
      - init-before:
          filters:
            branches:
              only: /^feature/.*$/
      - init:
          filters:
            branches:
              only: /^feature/.*$/
          requires:
            - init-before
      - build:
          filters:
            branches:
              only: /^feature/.*$/
          requires:
            - init
      - test:
          filters:
            branches:
              only: /^feature/.*$/
          requires:
            - build
      - deploy_dev:
          filters:
            branches:
              only: /^feature/.*$/
          requires:
            - build
      - trigger_qa:
          type: approval
      - deploy_qa:
          filters:
            branches:
              only: main
          requires:
            - trigger_qa
            - deploy_dev
      - trigger_uat:
          type: approval
      - deploy_uat:
          filters:
            branches:
              only: main
          requires:
            - trigger_uat
            - deploy_qa
      - trigger_prod:
          type: approval
      - deploy_prod:
          filters:
            branches:
              only: main
          requires:
            - trigger_prod
            - deploy_uat